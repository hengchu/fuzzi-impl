types
/* input partitions of MNIST data */
db_partitions:[1.0] { ({ [ float(785) ] }, [float(785)]) };
db1_partitions:     { ({ [ float(786) ] }, [float(785)]) };

/* the gradients computed from each row in each partition */
dws_partitions : { { [float(785)] } };
/* model parameters for each partition */
ws_partitions : { [ float(785)] };

w   : [float(785)];
/* initial weights */
ws1 : [float(785)];
ws2 : [float(785)];
ws3 : [float(785)];
ws4 : [float(785)];
ws5 : [float(785)];

/* aux variable for mapping over db partitions */
t_db   : ({ [ float(785) ] }, [float(785)]);
t_db_fst : { [ float(785) ] };

t_db1  : ({ [ float(786) ] }, [float(785)]);
t_db1_fst : { [ float(786) ] };

tt_db  :   [ float(785) ];
tt_db1 :   [ float(786) ];

/* aux variables for computing gradients */
t_dws    : { [float(785)] };
tt_dws   :   [float(785)];
t_ws     :   [float(785)];
t_dws_j  : {  float       };

tt_dws_j :    float;
dt       :    float;
temp     :    float;
prob     :    float;
sc       :    float;
size     :    float;
sum      :    float;

/* index variables */
i : int;
j : int;
k : int;

/* 0-sens variables */
zero_785 : [ float(785) ];
zero_786 : [ float(786) ];
zero_785_785 : ({ [ float(785) ] }, [float(785)]);
zero_786_785 : ({ [ float(786) ] }, [float(785)]);

/* hyperparams */
lamb : float;
rate : float;
end

extension get_ws(idx, out) {
  if idx == 0 then
    out = ws1;
  else
    if idx == 1 then
      out = ws2
    else
      if idx == 2 then
        out = ws3
      else
        if idx == 3 then
          out = ws4
        else
          out = ws5
        end
      end
    end
  end
};

lamb = 0.1;
rate = 0.1;

/* first, extend each row of data with a 1 */
bmap(db_partitions, db1_partitions, t_db, i, t_db1,
  t_db_fst = fst(t_db);

  bmap(t_db_fst, t_db1_fst, tt_db, j, tt_db1,
    /* reset mvs so we don't depend on their values */
    tt_db1 = zero_786;
    k      = 0;

    repeat(k, 785,
      tt_db1[k+1] = tt_db[k];
    );
    /* put the 1.0 in the front */
    tt_db1[0] = 1.0;
  );

  t_db1 = zero_786_785;
  fst(t_db1) = t_db1_fst;
  snd(t_db1) = snd(t_db);

  /* more reset */
  tt_db  = zero_785;
  tt_db1 = zero_786;
  t_db_fst = {};
  t_db1_fst = {};

  j      = 0;
  k      = 0;
);

/* compute gradients for each partition */
bmap(db1_partitions, dws_partitions, t_db1, i, t_dws,
  t_db1_fst = fst(t_db1);

  bmap(t_db1_fst, t_dws, tt_db1, j, tt_dws,
    /* reset mvs so we don't depend on their values */
    tt_dws = zero_785;
    k = 0;

    repeat(k, 785,
      tt_dws[k] = tt_db1[k];
    );

    dt     = clip(dot(tt_dws, snd(t_db1)), 100.0);
    temp   = exp(-1.0 * tt_db1[785] * dt);
    prob   = 1.0 / (1.0 + temp);
    sc     = (1.0 - prob) * tt_db1[785];
    tt_dws = scale(sc, tt_dws);

    dt = 0.0;
    temp = 0.0;
    prob = 0.0;
    sc = 0.0;
  );

  tt_db1 = zero_786;
  tt_dws = zero_785;
  j      = 0;
  k      = 0;
  dt     = 0.0;
  temp   = 0.0;
  prob   = 0.0;
  sc     = 0.0;
  t_db1_fst = {};
);

/* compute new weights for each partition */
bmap(dws_partitions, ws_partitions, t_dws, i, t_ws,
  j    = 0;
  t_ws = zero_785;
  size = fc(length(t_dws));

  repeat(j, 785,
    sum = 0.0;
    bmap(t_dws, t_dws_j, tt_dws, k, tt_dws_j, tt_dws_j = tt_dws[j]);
    bsum(t_dws_j, sum, k, tt_dws_j, 1000000.0);

    t_ws[j] = w[j] + (sum / size - 2.0 * lamb * w[j]) * rate;
  );

  t_dws_j  = {};
  tt_dws   = zero_785;
  tt_dws_j = 0.0;
  k = 0;
  j = 0;
  sum = 0.0;
  size = 0.0;
);
