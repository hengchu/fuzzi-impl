types
/* input data */
db:[1.0] { [float(5)] };
/* current centroids */
cs1 : [float(5)];
cs2 : [float(5)];
cs3 : [float(5)];
/* partitioned input data */
parts: [ { [float(5)] } ];

/* Auxilary variables for the partition extension */
t_in: [float(5)];
i: int;
t_out: int;
t_idx: int;
out_idx: {int};
t_part: {[float(5)]};

/* Temporary variables used in the partition computations */
min_dist: float;
this_dist: float;
j: int;
k: int;

k_INFINITY: float;

/* Temporary variables used for computing the centroids */
k : int;
cs_j: [float(5)];
this_partition: { [float(5)] };
this_partition_k: { float };
t_coord_k: float;
t_coord_k_sum: float;
part_size: float;
end

k_INFINITY = 100000000.0;

extension compute_dist(centroid, x, out) {
  out = (centroid[0] - x[0]) * (centroid[0] - x[0])
      + (centroid[1] - x[1]) * (centroid[1] - x[1])
      + (centroid[2] - x[2]) * (centroid[2] - x[2])
      + (centroid[3] - x[3]) * (centroid[3] - x[3]);
};

/* Partition the input database into 3 partitions, same as the number of centroids */
partition(db, parts, t_in, i, t_out, t_idx, out_idx, t_part, 3,
  min_dist = k_INFINITY;
  this_dist = 0.0;
  t_out = 0;

  compute_dist(cs1, t_in, this_dist);
  if this_dist < min_dist then
    min_dist = this_dist;
    t_out = 0;
  else
    skip;
  end;

  compute_dist(cs2, t_in, this_dist);
  if this_dist < min_dist then
    min_dist = this_dist;
    t_out = 1;
  else
    skip;
  end;

  compute_dist(cs3, t_in, this_dist);
  if this_dist < min_dist then
    min_dist = this_dist;
    t_out = 2;
  else
    skip;
  end;

  min_dist = 0.0;
  this_dist = 0.0;
);

extension get_cs(idx, out) {
  if idx == 0 then
    out = cs1;
  else
    if idx == 1 then
      out = cs2;
    else
      out = cs3;
    end
  end
};

extension set_cs(idx, in) {
  if idx == 0 then
    cs1 = in;
  else
    if idx == 1 then
      cs2 = in;
    else
      cs3 = in;
    end
  end
};

repeat(j, 3,
  this_partition = parts[j];
  repeat(k, 5,
    bmap(this_partition, this_partition_k, t_in, i, t_coord_k, t_coord_k = t_in[j]);
    bsum(this_partition_k, t_coord_k_sum, i, t_coord_k, 1.0);
    part_size $= lap(1.0, fc(length(this_partition_k)));
    t_coord_k_sum $= lap(5.0, t_coord_k_sum);
    t_coord_k_sum = t_coord_k_sum / part_size;
    get_cs(j, cs_j);
    cs_j[k] = t_coord_k_sum;
    set_cs(j, cs_j);
  );
);
